#  Copyright (c) 2024, RTE (https://www.rte-france.com)
#  See AUTHORS.txt
#  SPDX-License-Identifier: MPL-2.0
#  This file is part of Wattelse, a NLP application suite.

import requests
from loguru import logger

# Client credentials
CLIENT_ID = "admin"
CLIENT_SECRET = "57efb5729fed0f29185245e3cc282370397838ccebe29e4645e9fe9da1de0bab"

# API base URL
API_BASE_URL = "https://localhost:1234"


def get_access_token():
    """Obtain an access token using the client credentials flow"""
    token_url = f"{API_BASE_URL}/token"

    # For FastAPI's OAuth2PasswordRequestForm compatibility:
    # We need to use username/password fields instead of client_id/client_secret
    # and omit the grant_type parameter
    response = requests.post(
        token_url,
        data={
            "username": CLIENT_ID,  # Send client_id as username
            "password": CLIENT_SECRET,  # Send client_secret as password
            "scope": "full_access restricted",  # Requesting specific scopes
        },
        verify=False,
    )

    # NB in requests, verify=False to avoid problems of certificate not generated by a trusted CA

    if response.status_code == 200:
        token_data = response.json()
        return token_data["access_token"]
    else:
        raise Exception(f"Failed to obtain token: {response.text}")


def call_protected_api():
    """Call a protected API endpoint using the access token"""
    token = get_access_token()

    # Use the token to call a protected endpoint
    headers = {"Authorization": f"Bearer {token}"}

    # Read data (requires read:data scope)
    read_response = requests.get(
        f"{API_BASE_URL}/api/data", headers=headers, verify=False
    )
    logger.info(f"Read data response: {read_response.json()}")

    # Write data (requires write:data scope)
    write_response = requests.post(
        f"{API_BASE_URL}/api/data", headers=headers, json={"some": "data"}, verify=False
    )
    logger.info(f"Write data response: {write_response.json()}")


if __name__ == "__main__":
    call_protected_api()
