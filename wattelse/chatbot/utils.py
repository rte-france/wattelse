import re
from typing import List

from rapidfuzz import process, fuzz

from wattelse.common import TEXT_COLUMN


def highlight_answer(answer: str,
                     relevant_extracts: List[str],
                     highlight_color: str = "#CD6155",
                     highlight_length_filter: int = 15
                     ) -> List[str]:
    """Highlight parts of the context the LLM used to answer.
       Split answer into sentences. For each sentence, use fuzzy matching to find the most relevant
       context sentence to highlight.

    Args:
        answer: answer generated by the LLM
        relevant_extracts: list of relevant extracts retrieved by search engine
        highlight_color: highlight color
        highlight_length_filter: filter minimum number of characters in highlight

    Returns:
        List[str]: return the same List[str] as `relevant_extract` with highlighted content using html tag
    """
    # Split answer and relavant_extract into sentences
    answer_sentences = re.split("[.!?\n]+", answer)
    context_sentences = re.split("[.!?\n]+", "\n".join([extract[TEXT_COLUMN] for extract in relevant_extracts]))
    # Filter noise removing short sentences in context and answer
    answer_sentences = [text for text in answer_sentences if len(text)>highlight_length_filter]
    context_sentences = [text for text in context_sentences if len(text)>highlight_length_filter]
    # Find most similar context sentence for each answer sentence
    for sentence in answer_sentences:
        fuzzy_match = process.extract(sentence, context_sentences, scorer=fuzz.token_set_ratio, limit=1)[0][0].strip()
        # Highlight sentence in context
        for i in range(len(relevant_extracts)):
            relevant_extracts[i][TEXT_COLUMN] = relevant_extracts[i][TEXT_COLUMN].replace(
                fuzzy_match,f'<span style="background-color: {highlight_color}">'+fuzzy_match+"</span>"
                )
    return relevant_extracts
